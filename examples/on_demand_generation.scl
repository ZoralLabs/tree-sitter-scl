times := import("times")

booked_amount := $debit_interest_booked.amount
if booked_amount > 0 {
    reject("on demand generation: Unexpected positive amount on debit interest booked balance: " + booked_amount + ", " + $effective_time)
}
booked_amount = booked_amount.abs

primary_amount := $primary_balance.amount
if primary_amount > 0 {
    reject("on demand generation: Unexpected positive amount on primary balance: " + primary_amount + ", " + $effective_time)
}
primary_amount = primary_amount.abs

principle_amount := $emi_amount - booked_amount
if primary_amount <= principle_amount {
    principle_amount = primary_amount
}
if principle_amount < 0 {
    reject("on demand generation: Unexpected negative principle amount: " + principle_amount + ", " + $effective_time)
}

if booked_amount > 0 || principle_amount > 0 {
    new_transaction($demand_generation_transaction_type, "Demand generation for " + $effective_time.month_str)
}

if booked_amount > 0 {
    new_posting($arrears_interest_balance_id, $debit_interest_booked.id, booked_amount, $ledger, $interest_posting_type)
}

if principle_amount > 0 {
    new_posting($arrears_principle_balance_id, $primary_balance.id, principle_amount, $ledger, $principle_posting_type)
}

// closure checks
if booked_amount == 0 {
    set_parameter("debit_interest_booked_is_zero", true)
}
if $primary_is_zero && $arrears_principle_is_zero && $arrears_interest_is_zero && $debit_interest_accrual_is_zero && booked_amount == 0 && $penal_interest_accrual_is_zero {
    set_parameter("close_date", $effective_time)
    deactivate()
}

// schedule next event
installment_demand_time := times.next_scheduled_time($effective_time, $term_type, $installment_demand_date, $installment_demand_day)
schedule_event("demand_generation", installment_demand_time)
