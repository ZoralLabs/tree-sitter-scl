{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "SCL",
    "scopeName": "source.scl",
    "patterns": [
        { "include": "#comments" },
        { "include": "#block_comment" },
        { "include": "#constants" },
        { "include": "#defstrkey" },
        { "include": "#strings" },
        { "include": "#raw_strings" },
        { "include": "#chars" },
        { "include": "#keywords" },
        { "include": "#comparison_operators" },
        { "include": "#assignment_operators" },
        { "include": "#arithmetic_operators" },
        { "include": "#comparison_operators_2" },
        { "include": "#functions" },
        { "include": "#variables" }
    ],
    "repository": {
        "defstrkey": {
            "patterns": [
                {
                    "name": "entity.name.variable.scl",
                    "match": "\"[a-zA-Z0-9_]+\":"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "entity.name.variable.scl",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "match": "\\b([A-Za-z_][A-Za-z0-9_]*)(?=[\\s]*[(])",
                    "name": "entity.name.function.scl"
                },
                {
                    "match": "\\b([A-Za-z_][A-Za-z0-9_]*)[\\s]*(:|=|:=)[\\s]*(func)[\\s]*\\(",
                    "captures": {
                        "1": { "name": "entity.name.function.scl" },
                        "2": { "name": "keyword.operator.assignment.scl" },
                        "3": { "name": "keyword.control.scl" }
                    }
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.scl",
                    "match": "\\$[a-zA-Z][a-zA-Z0-9_]*\\b"
                },
                {
                    "name": "constant.language.scl",
                    "match": "\\b(true|false|undefined)\\b"
                },
                {
                    "name": "constant.numeric.scl",
                    "match": "\\b([0-9]+[.]*[0-9]*)\\b"
                }
            ]
        },
        "comparison_operators": {
            "patterns": [
                {
                    "name": "keyword.operator.comparison.scl",
                    "match": "(&&|\\|\\||==|!=)"
                }        
            ]
        },
        "assignment_operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.scl",
                    "match": "(\\+=|-=|/=|\\*=|%=|\\^=|&=|&^=|\\|=|<<=|>>=|=|:=|:|--|\\+\\+)"
                }        
            ]
        },
        "arithmetic_operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.scl",
                    "match": "(!|\\+|-|/|\\*|%|\\^|&|\\||<<|>>|&^)"
                }        
            ]
        },
        "comparison_operators_2": {
            "patterns": [
                {
                    "comment": "Comparison operator (second group because of regex precedence)",
                    "name": "keyword.operator.comparison.scl",
                    "match": "(<=|>=|<|>)"
                }                        
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(if|else|for|return|import|func|export|in|var)\\b"
                }
            ]
        },
        "comments": {
            "name": "comment.line.scl",
            "begin": "//",
            "end": "\n"
        },
        "block_comment": {
            "name": "comment.block.scl",
            "begin": "/\\*",
            "end": "\\*/"
        },
        "strings": {
            "name": "string.quoted.double.scl",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.scl",
                    "match": "\\\\."
                }
            ]
        },
        "raw_strings": {
            "name": "string.quoted.double.scl",
            "begin": "`",
            "end": "`",
            "patterns": [
                {
                    "name": "constant.character.escape.scl",
                    "match": "\\\\."
                }
            ]
        },
        "chars": {
            "name": "string.quoted.simple.scl",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "name": "constant.character.escape.scl",
                    "match": "\\\\."
                }
            ]
        }
    }
}